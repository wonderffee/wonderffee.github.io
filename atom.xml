<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wonderffee's Blog]]></title>
  <link href="http://wonderffee.github.io/atom.xml" rel="self"/>
  <link href="http://wonderffee.github.io/"/>
  <updated>2013-10-06T10:33:34+08:00</updated>
  <id>http://wonderffee.github.io/</id>
  <author>
    <name><![CDATA[wonderffee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[推荐Git可视化比较工具P4Merge]]></title>
    <link href="http://wonderffee.github.io/blog/2013/10/06/recommend-a-visual-diff-tool-p4merge-for-git-in-macos/"/>
    <updated>2013-10-06T10:17:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/10/06/recommend-a-visual-diff-tool-p4merge-for-git-in-macos</id>
    <content type="html"><![CDATA[<p>一向对命令行下的文本比较工具无爱，用Git也是这点比较麻烦，今天终于让我找到了一个Git的GUI 比较工具P4Merge，免费的，支持中文，还不错，推荐一下</p>

<p>配置P4Merge时主要参考了这篇文章<a href="http://techsingular.net/?p=922">Git、P4merge 和 OS X</a>，只是留的坑太多了，好不容易才让我搞定。</p>

<!--more-->


<p>关于下载:    <br/>
打开这个链接: <a href="http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools">perforce-visual-merge-and-diff-tools</a>，点左上角的“FREE DOWNLOAD P4Merge”, 找到Perforce Clients中的&#8221;P4Merge: Visual Merge Tool&#8221;项，在右边的第二行选择Mac OS 10.6+ (64bit），点下面橙色的“Accept and Download”，选择跳过Skip Registration，就会开始下载了。</p>

<p>下载到P4V.dmg文件后，双击打开，拖动P4Merge到Application文件夹上就可以完成安装了。</p>

<p>下面开始配置，这个原文留下的坑就太多了：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global diff.tool p4merge
</span><span class='line'>git config --global difftool.p4merge.cmd /Applications/p4merge.app/Contents/MacOS/p4merge
</span><span class='line'>git config --global difftool.p4merge.cmd <span class="s2">&quot;/Applications/p4merge.app/Contents/Resources/launchp4merge \$LOCAL \$REMOTE&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果直接复制原文的代码，运行上面的代码时会提示：    <br/>
error: key does not contain a section: -global    <br/>
跟别人的命令比较一下，就会发现应该是&mdash;global（要两个短横连在一起的），原文的短横线有问题</p>

<p>现在敲git difftool命令执行时，会提示：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/libexec/git-core/mergetools/p4merge: line 2: p4merge: <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>原因是路径还需要再配置一下，如下，蛋疼。。。</p>

<figure class='code'><figcaption><span>ang:bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global difftool.p4merge.path "/Applications/p4merge.app/Contents/Resources/launchp4merge"</span></code></pre></td></tr></table></div></figure>


<p>自己还尝试过用软链接来解决这问题，如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /Applications/p4merge.app/Contents/MacOS/p4merge /usr/local/bin/p4merge
</span></code></pre></td></tr></table></div></figure>


<p>结果报了一个error loading resource file问题，这个就不要使用了。</p>

<p>以后想要比较Git中的代码时，敲git difftool filepath 就行了</p>

<p>P4Merge除了有比较功能，还有合并功能，怎么配置可以借鉴下面给出的参考链接。另外还有一个可视化比较工具meld，据说也不错，有时间试试</p>

<p>主要参考：   <br/>
<a href="http://techsingular.net/?p=922">Git、P4merge 和 OS X</a>   <br/>
<a href="http://blog.csdn.net/ccf0703/article/details/7661789">Mac os x下git merge工具P4Merge的安装与配置</a>   <br/>
<a href="http://nieyong.github.io/wiki_ny/git%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html">git用户信息</a>   <br/>
<a href="https://gist.github.com/tony4d/3454372">Setup p4merge as a visual diff and merge tool for git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐MacOS下一款漂亮的终端主题]]></title>
    <link href="http://wonderffee.github.io/blog/2013/10/06/recommend-a-beautiful-termimal-theme-in-macos-x/"/>
    <updated>2013-10-06T08:51:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/10/06/recommend-a-beautiful-termimal-theme-in-macos-x</id>
    <content type="html"><![CDATA[<p>Mac下的软件向来给人赏心悦目的感觉，但自带的终端就显得比较朴素了，抽空找到了一款漂亮的终端主题，给大家推荐一下。</p>

<p>这款主题名为PEPPERMINT，下载地址点这里: <a href="http://noahfrederick.com/blog/2011/lion-terminal-theme-peppermint/">MAC OS X LION TERMINAL THEME: PEPPERMINT</a></p>

<p>下载之后选择终端菜单的偏好设置——设置，在左下角点一个有下拉标志的设置按钮，选择导入，就可以把这个主题导入到Terminal的主题列表中，设置默认后每次启动后就可以用这个主题了。</p>

<p>怎么漂亮就不说了，上图才是王道：</p>

<!--more-->


<p><img class="center" src="http://wonderffee.github.io/images/terminal/terminal_peppermint.jpg"></p>

<p><img class="center" src="http://wonderffee.github.io/images/terminal/terminal_peppermint_full.jpg"></p>

<p>上面图片中的半透明效果在我的Mac上不是很明显，可以按下图中的方法进行设置：</p>

<p><img class="center" src="http://wonderffee.github.io/images/terminal/terminal_setting1.jpg"></p>

<p><img class="center" src="http://wonderffee.github.io/images/terminal/terminal_setting2.jpg"></p>

<p>参考：    <br/>
<a href="http://noahfrederick.com/blog/2011/lion-terminal-theme-peppermint/">MAC OS X LION TERMINAL THEME: PEPPERMINT</a>   <br/>
<a href="http://www.macobserver.com/tmo/article/setting_the_terminal_window_transparency">Setting the Terminal Window Transparency</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决终端输命令换行覆盖问题]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/15/solve-new-line-problem-in-terminal/"/>
    <updated>2013-08-15T22:24:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/15/solve-new-line-problem-in-terminal</id>
    <content type="html"><![CDATA[<p>发现终端输入比较长的命令时换行总是出问题，命令超出一行时会出现覆盖提示符的情况，烦不胜烦，今天终于找到问题所在了。
之前为了让终端显示彩色字符，在.bash_profile里增加了这样一个设置：</p>

<!--more-->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;\[\e[0;31m\] \[\u@\h \W\]\$ \[\e[m\] &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>正是这个设置导致命令换行出问题。</p>

<p>对比了一下别人正确的设置，发现我的PS1里多了一对\[和\]，也就是中间的那一对\[和\]要删掉才行（貌似变成[和]也木有问题）。\[和\]是用于把非打印字符括起来的（颜色应该是非打印字符吧），别人出的换行问题都是没用\[和\]把非打印字符括起来的缘故，我这里却是把不该括的打印字符括了起来也有问题，真是多也不行少也不行。纠正的设置为：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;\[\e[0;31m\] \u@\h \W\$ \[\e[m\] &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>顺便也再调整了一下终端的颜色显示，最终在.bash_probile里做的设置如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">OLOR_BOLD</span><span class="o">=</span><span class="s2">&quot;\[\e[1m\]&quot;</span>
</span><span class='line'><span class="nv">COLOR_DEFAULT</span><span class="o">=</span><span class="s2">&quot;\[\e[0m\]&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLICOLOR</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">GREP_OPTIONS</span><span class="o">=</span><span class="s2">&quot;--color=auto&quot;</span>
</span><span class='line'><span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;\[\e[01;33m\]\u@\h \W\$\[\e[m\] &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考： <br/>
<a href="http://lnote.blogbus.com/logs/106241420.html">终端提示符设置</a>  <br/>
<a href="http://linux.fatduck.org/2012/03/bash.html">Bash长行换行问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[别用symbolicatecrash来解析crash log了]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/14/dont-use-symbolicatecrash-to-symbolicate-the-crash-log/"/>
    <updated>2013-08-14T22:18:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/14/dont-use-symbolicatecrash-to-symbolicate-the-crash-log</id>
    <content type="html"><![CDATA[<p>今天突然发现了一个解析iOS crash log的好方法，忍不住来分享一下。</p>

<p>相信每个做iOS开发的TX都应该不会对symbolicatecrash陌生，我们第一次遇到真机上产生的崩溃日志时，在网上搜到的大部分教程都告诉我们说要用symbolicatecrash来解析crash log，我信了，所以相当长一段时间内，我都是用这个工具来解析crash log的。</p>

<!--more-->


<p>每次都去敲命令来解析crash log本身就是一件很蛋疼的事情，但这还不是麻烦的，最麻烦的是用symbolicatecrash还经常遇到问题：怎么crash log又解析失败了？怎么批量解析crash log？</p>

<p>问题出在方法上，实际上我们完全用不着symbolicatecrash的，因为Xcode中自带的organizer就是很好的解析crash log工具了。</p>

<p>举个例子，如果我们的应用是在自己的机器上编译生成的，把应用装在真机上如果有崩溃产生，把真机通过数据线连接到Mac电脑上，打开Xcode菜单上的Window——Organizer，找到设备的device logs项中的crash log，稍等片刻，你就会发现这里的crash log已经被自动解析过了（大部分情况会自动解析，如果不行请右键点击选择Re-Sysbomlicate）。</p>

<p>但是如果应用不是在自己的编译上生成的，你会发现organizer不会自动解析crash log（除了系统函数）。怎么在这种情况下也让organizer也能自动解析crash log呢？</p>

<p>其实之前的organizer之所以能自动解析你设备上的crash log，是因为它能根据spotlight的索引来找到对应的.app和dSYM文件，对于这一点，我的猜测是在自己的Mac电脑上编译生成应用时，系统自动对其进行了索引。这个索引应该是根据app uuid来索引的。这个uuid可以执行下面的命令得到：</p>

<p>dwarfdump &mdash;uuid YourApp.app/YourApp   <br/>
dwarfdump &mdash;uuid YourApp.app.dSYM</p>

<p>如果要能解析出crash log，crash log中携带的uuid与dSYM文件的uuid必须与app uuid一致。</p>

<p>既然spotlight能自动进行索引，那是不是也可以手动进行索引呢？答案是能，这正是自动解析的关键。手动索引的命令是mdimport。比如，把iOS应用的.app和.dSYM文件放到一个文件夹中，执行命令mdimport foldername就可以。命令执行完成后再用刚才的organizer去查看crash log，你会发现也能自动解析了。</p>

<p>这意味着什么呢？意味着你把应用所有版本的.app和.dSYM文件放入一个专门的文件夹中，只要mdimpor这个文件夹，以后的organizer就能自动解析出你所有的crash log。</p>

<p>好处不仅仅是这一点。organizer还有一个import功能，借助这个功能，我们可以把其它Mac电脑上的crash log导入到自己电脑中的organizer，然后就可以自动解析。更好的是，用这个功能可以批量导入收集到的crash log，然后我们就可以批量解析所有的crash log。</p>

<p>比起用symbolicatecrash，这种方法简便了许多，从现在起，你可以抛弃symbolicatecrash了。但其实这还不是最好的方法，目前先进的方法是用crash report管理系统来管理所有的crash，比如使用QuincyKit, Crashlytics, Flurry等来进行管理，有时间自己也研究研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objective-c的category并非不能增加新属性]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/07/use-category-add-property-for-a-class/"/>
    <updated>2013-08-07T22:46:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/07/use-category-add-property-for-a-class</id>
    <content type="html"><![CDATA[<p>上一篇文章中应用到了hidesBottomBarWhenPushed属性，关于这个属性，如果你够仔细就可以发现它是在UINavigationController.h文件中定义的，而不是在UIViewController中定义的。这是利用了objective-c的category特性，原代码如下：</p>

<!--more-->




<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UIViewController</span> <span class="nl">(UINavigationControllerItem)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">,</span><span class="n">retain</span><span class="p">)</span> <span class="n">UINavigationItem</span> <span class="o">*</span><span class="n">navigationItem</span><span class="p">;</span> <span class="c1">// Created on-demand so that a view controller may customize its navigation appearance.</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">hidesBottomBarWhenPushed</span><span class="p">;</span> <span class="c1">// If YES, then when this view controller is pushed into a controller hierarchy with a bottom bar (like a tab bar), the bottom bar will slide out. Default is NO.</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">,</span><span class="n">retain</span><span class="p">)</span> <span class="n">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span><span class="p">;</span> <span class="c1">// If this view controller has been pushed onto a navigation controller, return it.</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>category是一个很棒的objective-c特性，可以为已经存在的类增加方法，而不需要增加一个子类。不过你也许会模糊地记得category是不能给一个类增加属性的(除非借助associative)，是不是对这里的category能给一个类增加新的属性非常奇怪呢？</p>

<p>其实不是这样的，objective-c中的category只是不能增加实例变量，这里添加的hidesBottomBarWhenPushed属性只是添加了setter和getter方法的声明，在对应的m文件中应该是实现了这两个方法并调用了其它的private变量或利用了runtime机制，相关讨论可以见这里：<a href="http://www.cocoachina.com/bbs/read.php?tid=132558">类别不是应该只能添加方法吗？类别现在能直接添加属性了？</a>。用category添加了属性如何实现对应的set、get方法可以参考这个：<a href="http://www.cnblogs.com/wupher/archive/2013/01/05/2845338.html">让Category支持添加属性与成员变量</a>。</p>

<p>有一个很意思的问题，从xcode4.5开始只要声明了property就可以自动生成实例变量，但是如果是在一个类的category类别中添加新的property，会自动生成对应的实例变量吗，有兴趣的可以自己动手试试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Tabbar实现push动画隐藏效果]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/07/hide-custom-tab-bar-with-animation-when-push/"/>
    <updated>2013-08-07T22:45:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/07/hide-custom-tab-bar-with-animation-when-push</id>
    <content type="html"><![CDATA[<p>在之前的一篇文章(<a href="http://wonderffee.github.io/blog/2013/08/05/simulate-weico-custom-tabbar/">链接</a>)中我写到了没有用UITabbarController来实现一个自定义Tabbar，当然功能也简陋了点。注意到在Weico或微信中的自定义tabbar有一个这样的功能：push到下一个页面时tabbar会被自动隐藏，下面我就来说说如何使我前面做的自定义tabbar也能实现隐藏。</p>

<!--more-->


<p>如果是原生的tabbar，这个功能实现很容易。在iOS中，每个UIViewController都有一个属性hidesBottomBarWhenPushed，每次push一个viewController时，设置viewController. hidesBottomBarWhenPushed=YES就可以自动实现前面所说的隐藏功能。但是前提是必须使用UITabbarController，我这里实现的自定义tab bar完全没有使用UITabbarController，那就要多费点心。</p>

<p>如果要实现自定义tabbar在每次push viewController时隐藏，很显然我们需要push时有事件能够通知自定义tab bar隐藏。如果你熟悉UINavigationController的push流程的话，应该就知道我们可以让UINavigationController执行
push时调用navigationController: willShowViewController:方法来触发通知，前提是要遵守UINavigationControllerDelegate协议。
由于hidesBottomBarWhenPushed是每个UIViewController都有的属性，我们姑且还是把它用上。代码如下：</p>

<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span>
</span><span class='line'>  <span class="nf">willShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class='line'>                <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">hidesBottomBarWhenPushed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tabBar</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tabBar</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的实现是比较简单的。对比weico或微信iPhone应用的自定义tab bar push隐藏行为，你就会发现它们有一个自然的过滤动画来实现隐藏，而且与viewController的push动画同步，这是上面的代码做不到的。如果要实现这个动画，就需要对self.tabbar设置frame的过渡动画，代码如下：</p>

<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navController</span> <span class="nf">willShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">viewController</span><span class="p">.</span><span class="n">hidesBottomBarWhenPushed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">hideTabBar</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">showTabBar</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hideTabBar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tabBarIsShow</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="c1">//already hidden</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.35</span>
</span><span class='line'>                     <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                         <span class="n">CGRect</span> <span class="n">tabFrame</span> <span class="o">=</span> <span class="n">tabBar</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>                         <span class="n">tabFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">tabFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>                         <span class="n">tabBar</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">tabFrame</span><span class="p">;</span>
</span><span class='line'>                     <span class="p">}];</span>
</span><span class='line'>    <span class="n">tabBarIsShow</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showTabBar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tabBarIsShow</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="c1">// already showing</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.35</span>
</span><span class='line'>                     <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                         <span class="n">CGRect</span> <span class="n">tabFrame</span> <span class="o">=</span> <span class="n">tabBar</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>                         <span class="n">tabFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">tabFrame</span><span class="p">)</span> <span class="o">+</span> <span class="n">CGRectGetMinX</span><span class="p">(</span><span class="n">tabFrame</span><span class="p">);</span>
</span><span class='line'>                         <span class="n">tabBar</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">tabFrame</span><span class="p">;</span>
</span><span class='line'>                     <span class="p">}];</span>
</span><span class='line'>    <span class="n">tabBarIsShow</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中的0.35秒这个时间保证了与tabbar的隐藏动画与viewController的push动画同步，基本上可以实现以假乱真的效果。</p>

<p>代码链接：<a href="https://github.com/wonderffee/idev-recipes/tree/master/CustomTabBar">https://github.com/wonderffee/idev-recipes/tree/master/CustomTabBar
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6下UITextField退格变清空问题的解决方法]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/07/a-solution-to-problem-of-hitting-backspace-result-in-deleting-all-uitextfields-characters-under-ios6/"/>
    <updated>2013-08-07T19:39:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/07/a-solution-to-problem-of-hitting-backspace-result-in-deleting-all-uitextfields-characters-under-ios6</id>
    <content type="html"><![CDATA[<p>自己的项目中一直有一个必现的UITextField退格变清空问题，测试发现只有iOS6下有，其它iOS版本都没有问题，基本上可以确定与iOS6有关。由于问题不是很大又忙就搁置了很久，今天实在不能忍受便花了点时间解决此问题，记录一下吧。</p>

<p>这个问题是在某个有默认值的UITextField上是必现的，一旦用退格键删除最后一个字符或中间某个字符，整个UITextfield的内容被清空了，一直百思不得其解，google了一下发现有人遇到类似的问题，并给出了复现步骤(<a href="http://blog.csdn.net/kindazrael/article/details/8075245">链接</a>)，如下：</p>

<!--more-->


<p>有一个secureTextEntry为Yes的UITextField和 一个普通的UITextField，重现步骤：   <br/>
1. 点击普通的UITextField输入类容，      <br/>
2. 点击密码UITextField输入内容，  <br/>
3. 点击普通的UITextField重新获得焦点，  <br/>
4. 接着点击键盘上的退格键，  <br/>
结果：这时会发现普通的UITextField被清空了。</p>

<p>测试了一下，随便找一个有用户名与密码登录页面的应用，在iOS6下就会复现出这个问题，比如iPhone自带的邮件app。但这个重现步骤说得并不准确，第1步和第2步的前提是对应的UITextField已经有内容，虽然跟自己的复现方法有点不一样，不过总算知道这个问题是怎么回事了。怎么说呢，这应该是iOS6的UITextField的一个新特性引入的问题，原文把这个问题称之为“iOS 6 Secure密码UITextField造成非密码UITextField退格清空Bug”，但是iOS6.0就有这个问题，iOS6.1.3都没有解决，估计apple没把它当bug，坑爹啊。</p>

<p>咱们拿apple没办法，那就只有想办法绕过去啊，初步的思路是截获退格键删除行为，每点一次退格键删除时只允许删除一个字符。这就要用到UITextFieldDelegate的一个textField:shouldChangeCharactersInRange:replacementString方法，这个方法是在UITextField的内容改变时调用，第二个参数表明内容改变的范围，第三个参数是替代的字符串。代码如下：</p>

<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textField:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span> <span class="nf">shouldChangeCharactersInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="nf">replacementString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">range</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">textField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span> <span class="nl">substringToIndex:</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置一下UITextField的delegate就可以调用到此方法，range.length == 1 &amp;&amp; string.length == 0就是删除一个字符时所满足的条件，如果条件满足，就只让textField的内容减少一个字符。初步测试，可以解决退格变清空的问题，但是又带来另一个问题：如果是在文字中间点退格键删除文字，就变成从文字的最后删除一个字符。这并不是我们想要的，怎么办呢，那就要找到删除的字符的位置，这个<a href="http://stackoverflow.com/questions/16765334/ios-6-uitextfield-secure-how-to-detect-backspace-clearing-all-characters">链接</a>里给了一个终极解决办法，代码如下：</p>

<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textField:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span> <span class="nf">shouldChangeCharactersInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="nf">replacementString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">range</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Stores cursor position</span>
</span><span class='line'>            <span class="n">UITextPosition</span> <span class="o">*</span><span class="n">beginning</span> <span class="o">=</span> <span class="n">textField</span><span class="p">.</span><span class="n">beginningOfDocument</span><span class="p">;</span>
</span><span class='line'>            <span class="n">UITextPosition</span> <span class="o">*</span><span class="n">start</span> <span class="o">=</span> <span class="p">[</span><span class="n">textField</span> <span class="nl">positionFromPosition:</span><span class="n">beginning</span> <span class="nl">offset:</span><span class="n">range</span><span class="p">.</span><span class="n">location</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSInteger</span> <span class="n">cursorOffset</span> <span class="o">=</span> <span class="p">[</span><span class="n">textField</span> <span class="nl">offsetFromPosition:</span><span class="n">beginning</span> <span class="nl">toPosition:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Save the current text, in case iOS deletes the whole text</span>
</span><span class='line'>            <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Trigger deletion</span>
</span><span class='line'>            <span class="p">[</span><span class="n">textField</span> <span class="n">deleteBackward</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// iOS deleted the entire string</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">!=</span> <span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">textField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">text</span> <span class="nl">stringByReplacingCharactersInRange:</span><span class="n">range</span> <span class="nl">withString:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Update cursor position</span>
</span><span class='line'>                <span class="n">UITextPosition</span> <span class="o">*</span><span class="n">newCursorPosition</span> <span class="o">=</span> <span class="p">[</span><span class="n">textField</span> <span class="nl">positionFromPosition:</span><span class="n">textField</span><span class="p">.</span><span class="n">beginningOfDocument</span> <span class="nl">offset:</span><span class="n">cursorOffset</span><span class="p">];</span>
</span><span class='line'>                <span class="n">UITextRange</span> <span class="o">*</span><span class="n">newSelectedRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">textField</span> <span class="nl">textRangeFromPosition:</span><span class="n">newCursorPosition</span> <span class="nl">toPosition:</span><span class="n">newCursorPosition</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">textField</span> <span class="nl">setSelectedTextRange:</span><span class="n">newSelectedRange</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>思路是先取到光标位置，把文本内容暂存，清空原来UITextField的内容，然后将暂存的文本内容中光标左侧的文字replace掉重新赋给UITextField，并恢复光标位置，难点在于怎么获取光标位置与恢复光标位置。</p>

<p>一般用到用户名与密码UITextField的地方用这个方法就能解决问题了，只是还有点小问题，即如果不是从中间删除一个字符，而是一次删除若干个字符还是有问题的，这是由if中的range.length == 1条件限制的，稍加改造下应该就能解决。另外一个问题是如果有中文字符或其它UTF8字符，估计得考虑一下是不是应该要用“text.length &ndash; 1”，不过能有多少应用的用户名或密码带中文呢</p>

<h4>参考：</h4>

<ul>
<li><a href="http://blog.csdn.net/kindazrael/article/details/8075245">iOS 6 Secure密码UITextField造成非密码UITextField退格清空Bug</a></li>
<li><a href="http://stackoverflow.com/questions/14400724/backspace-functionality-in-ios-6-ios-5-for-uitextfield-with-secure-attribute">Backspace functionality in iOS 6 &amp; iOS 5 for UITextfield with &lsquo;secure&rsquo; attribute</a></li>
<li><a href="http://stackoverflow.com/questions/16765334/ios-6-uitextfield-secure-how-to-detect-backspace-clearing-all-characters">iOS 6 UITextField Secure &ndash; How to detect backspace clearing all characters?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿Weico iPhone客户端自定义tabbar]]></title>
    <link href="http://wonderffee.github.io/blog/2013/08/05/simulate-weico-custom-tabbar/"/>
    <updated>2013-08-05T22:28:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/08/05/simulate-weico-custom-tabbar</id>
    <content type="html"><![CDATA[<p>无意中看到有人推荐用weico看新浪微博，试用了一下就没回得头了，无论是UI、交互还是功能，weico都比新浪的官方微博客户端好太多了，也难怪weico这么流行。看到有人说weico火是因为遇到了猪一样的队友，这话也不过分啊，不过了解到新浪官方微博客户端和weico都是同一家公司做的，我只能说呵呵。。。</p>

<!--more-->


<p>用就用吧，但有时候就是手痒，想模仿weico做一个微博客户端，一来练练手，二来挑战一下自己。先从简单的做起，就拿weico客户端底部的自定义tabbar入手吧。</p>

<p>weico的自定义tabbar主要特点就是tab按钮选中时有一个滑块动画效果，实现起来不是很难，基于<a href="https://github.com/boctor/idev-recipes%E2%80%8E">iDev Recipes</a>改造一下很快就可以做出一个以假乱真的weico自定义tabbar了，废话不说，直接上代码：<a href="https://github.com/wonderffee/idev-recipes/tree/master/CustomTabBar">https://github.com/wonderffee/idev-recipes/tree/master/CustomTabBar</a></p>

<p>注意这里的自定义tabbar代码完全没有使用UITabbarController，因此也就没有涉及到把原生的tabbar隐藏，省却了不少麻烦事。</p>

<p>截图： <br/>
<img src="http://wonderffee.github.io/images/customTabBar.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS抓包利器Charles]]></title>
    <link href="http://wonderffee.github.io/blog/2013/07/13/best-packet-capture-tool-charles-in-ios/"/>
    <updated>2013-07-13T11:21:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/07/13/best-packet-capture-tool-charles-in-ios</id>
    <content type="html"><![CDATA[<p>看唐巧的<a href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/">分析支付宝客户端的插件机制</a>一文发现他使用了抓包工具Charles，想起去年有人给我推荐过这个工具，但是当时我觉得WireShark就够用了就没尝试。这次看到又有人使用Charles我就重视起来了，Charles到底有什么好？</p>

<p>搜了一下，发现大多数使用者都是将Charles作为移动端抓包工具使用的，这样就意味着我们可以用Charles来截取iPhone/iPad上app所发出的网络请求来进行分析，<a href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/">分析支付宝客户端的插件机制</a>一文就是这么用的。WireShark显然做不到这一点，优势一下子就体现出来了。</p>

<!--more-->


<p>在Mac上安装Charles后，启动Charles，首先弹出一个框提示是否允许Charles有自动修改网络设置的权限，选择允许后出现Charles主界面。Charles主界面左侧有Structure和Sequence，你会发现会发现Structure这一栏里会逐步出现当前我的mac正在请求的链接，也就是说Charles一启动就自动进行抓包了。不过遗憾的是Structure栏里没有过滤选项，意味着你不能过滤特定网站。切换到Sequence栏，这个就容易懂了，按时间顺序来排列的，与WireShark一致。下方的Filter可以过滤，而是还是实时过滤的，这一点就比WireShark强多了。</p>

<p> <img src="http://wonderffee.github.io/images/Structure.png"></p>

<p> <img src="http://wonderffee.github.io/images/Sequence.png"></p>

<p>如何在Mac上用Charles远程抓iPhone上app的网络请求呢？方法相当简单，下面就提供了HTTP和HTTPS抓包的操作步骤，简单几步就搞定了。</p>

<h3>HTTP抓包</h3>

<ul>
<li>打开Charles程序</li>
<li>查看Mac电脑的IP地址，如192.168.1.7</li>
<li>打开iOS设置，进入当前wifi连接，设置HTTP代理Group，将服务器填为上一步中获得的IP，即192.168.1.7，端口填8888</li>
<li>iOS设备打开你要抓包的app进行网络操作</li>
<li>Charles弹出确认框，点击Allow按钮即可</li>
</ul>


<h3>HTTPS抓包</h3>

<ul>
<li>下载Charles证书<a href="http://www.charlesproxy.com/ssl.zip">http://www.charlesproxy.com/ssl.zip</a>，解压后导入到iOS设备中（将crt文件作为邮件附件发给自己，再在iOS设备中点击附件即可安装；也可上传至dropbox之类的网盘，通过safari下载安装）</li>
<li>在Charles的工具栏上点击设置按钮，选择Proxy Settings…</li>
<li>切换到SSL选项卡，选中Enable SSL Proxying，别急，选完先别关掉，还有下一步</li>
<li>这一步跟Fiddler不同，Fiddler安装证书后就可以抓HTTPS网址的包了，Charles则麻烦一些，需要在上一步的SSL选项卡的Locations表单填写要抓包的域名和端口，点击Add按钮，在弹出的表单中Host填写域名，比如填api.instagram.com，Port填443</li>
</ul>


<p>我简单试用了一下Charles的远程抓包功能，发现Charles比WireShark还有一个优势是能对JSON数据(在JSON Text栏)进行解析，从而让我们可以更直观地查看JSON串信息(在JSON 栏)。此外Charles对中文支持比较好，JSON串中的中文信息一般会显示为一长串的\ug开头的字符，解析之后就能显示出中文了。平常总头痛Wireshark对中文支持不好，用Charles就完全没有这个问题了。</p>

<p>参考资料： <br/>
<a href="http://larryhou.github.io/blog/2012/11/05/remote-debug-with-charles-proxy/">使用Charles远程调试iOS移动应用</a>   <br/>
<a href="http://ju.outofmemory.cn/entry/32837">mac下的抓包工具Charles</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS实现UIImageView透明区域点击事件穿透]]></title>
    <link href="http://wonderffee.github.io/blog/2013/07/10/pass-touch-event-through-uiimageviews-transparent-area-in-ios/"/>
    <updated>2013-07-10T22:16:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/07/10/pass-touch-event-through-uiimageviews-transparent-area-in-ios</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>最近要在iPad上实现一个很独特的功能，简单描述一下就是要显示一个带有半透明背景的弹出界面，在其上加一个不规则形状的图片，手指点击这个弹出界面的半透明区域就退出这个弹出界面。</p>

<p>问题是UED/美工不会提供纯粹的不规则形状切图，实际只能给出的是以不规则形状加透明区域的矩形切图，这就带来另外一个要求：点击矩形切图的透明区域也要退出弹出界面。这就有点难办了，透明区域也是不规则形状的，该怎么判断出手指点击的点就是透明区域呢？</p>

<!--more-->


<h2>思路</h2>

<p>一般在iOS的控件中，要不就是完全允许用户点击，要不就是禁止用户交互，这是可以通过设置控件的userInteractionEnabled属性来修改。如果添加的图片不是不规则形状的，而是矩形，这问题就简单多了，只需要将矩形图片对应的UIImageView的userInteractionEnabled设为YES，对半透明背景View（或者直接设置为一个按钮）设置点击事件处理，就可以点击实现半透明背景退出弹出界面。</p>

<p>现在的情况是这个矩形图片一分为二，一部分为实体的不规则形状图片，一部分为不规则形状的透明区域。很显然，问题的解决思路是：让手指能“穿透”这个不规则透明区域去点击背后的半透明背景，而不透明部分就不“穿透”。</p>

<p>前面说的userInteractionEnabled属性只是简单地一刀切设置控件是否允许用户操作（即可以响应手指触摸事件），更加灵活的设置方法是使用UIView的hitTest:withEvent:与pointInside:withEvent:。简单介绍下，iOS中的pointInside:withEvent:方法是用来判断当前的点击或者触摸事件的点是否在当前的view中，它被hitTest:withEvent:调用，通过对每个子视图调用pointInside:withEvent:决定最终哪个视图来响应此事件。如果一个子视图的pointInside:withEvent:返回NO，说明这个子视图不会响应点击事件，然后就去寻找更深层的子视图来找到最终响应触摸事件；返回YES就说明子视图能响应点击事件（但不一定是子视图本身响应，若子视图还有子视图的话，还会继续循环去找最终响应事件的子子视图）。</p>

<p>于是，本文的问题就可以这样转化：创建一个UIImageView的子类，重写pointInside:withEvent:方法，让矩形图片的透明区域的pointInside:withEvent:返回NO，而非透明区域的pointInside:withEvent:返回YES，如果能达到这个要求，透明区域点击事件穿透就能够实现。</p>

<p>现在的关键问题是怎么识别出这个透明区域。 <br/>
iOS中通常用的图片是PNG图片，这种图片有alpha通道，如果能获取PNG图片每个像素的alpha值，就不难判断出手指点击的图片区域是不是透明的。</p>

<p>关键代码如下：</p>

<figure class='code'><figcaption><span>Here&#8217;s Code </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">pointInside:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Using code from http://stackoverflow.com/questions/1042830/retrieving-a-pixel-alpha-value-for-a-uiimage</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">pixel</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">pixel</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="n">kCGImageAlphaOnly</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">image</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mf">255.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">transparent</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">&lt;</span> <span class="mf">0.01f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="n">transparent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：  <br/>
这段代码是通过CGBitmapContextCreate方法创建只包含alpha通道的图形上下文（真不知道context怎么翻译为最好），这个图形上下文的大小为1x1，也就是实际上只放得下一个像素，将矩形图片手指触摸点point绘制到这个图形上下文中，那么pixel数组中唯一元素的值就是手指触摸点那一个像素的alpha值，做归一化为与0.01比较，如果小于0.01就表明手指触摸点是透明的，这时候返回NO就能够实现穿透效果，相反大于0.01就不会穿透。</p>

<p>注意到代码中用到的坐标为(-point.x, -point.y)，为什么会是负数呢？这是因为如果context的区域大小与image一致的话，[image drawAtPoint:]就会将image全部绘制在context中，而实际上context只放得下一个像素，为了保证point点能刚好绘制在这个context上，就必须设置绘制的起始坐标为(-point.x, -point.y)。</p>

<p>代码中的UIGraphicsPushContext容易误导人，看名字以为是将参数中指定的context push入栈，但是参数中的context明明就是刚创建的啊？其实它是将旧的context（默认的context）入栈，再切换到新的context（也就是参数中指定的）绘制，执行UIGraphicsPopContext后就会切换回旧的context，而在新的context上绘制的内容完全不影响旧context（默认context）。这与CGContextSaveGState和CGContextRestoreGState是有本质区别的。</p>

<p>附CGBitmapContextCreate函数参数详解: <br/>
原型：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CGContextRef</span> <span class="nf">CGBitmapContextCreate</span> <span class="p">(</span>
</span><span class='line'>   <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">size_t</span> <span class="n">width</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">size_t</span> <span class="n">height</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">size_t</span> <span class="n">bitsPerComponent</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">size_t</span> <span class="n">bytesPerRow</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CGColorSpaceRef</span> <span class="n">colorspace</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CGBitmapInfo</span> <span class="n">bitmapInfo</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数：  <br/>
data                                    指向要渲染的绘制内存的地址。这个内存块的大小至少是（bytesPerRow*height）个字节 <br/>
width                                  bitmap的宽度,单位为像素 <br/>
height                                bitmap的高度,单位为像素  <br/>
bitsPerComponent        内存中像素的每个组件的位数.例如，对于32位像素格式和RGB 颜色空间，你应该将这个值设为8.  <br/>
bytesPerRow                  bitmap的每一行在内存所占的比特数  <br/>
colorspace                      bitmap上下文使用的颜色空间。  <br/>
bitmapInfo                       指定bitmap是否包含alpha通道，像素中alpha通道的相对位置，像素组件是整形还是浮点型等信息的字符串。</p>

<p>描述： <br/>
当你调用这个函数的时候，Quartz创建一个位图绘制环境，也就是位图上下文。当你向上下文中绘制信息时，Quartz把你要绘制的信息作为位图数据绘制到指定的内存块。一个新的位图上下文的像素格式由三个参数决定：每个组件的位数，颜色空间，alpha选项。alpha值决定了绘制像素的透明性。</p>

<h3>参考资料：</h3>

<ul>
<li><a href="http://blog.csdn.net/wangyuchun_799/article/details/7804809">CGBitmapContextCreate函数参数详解</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_489ab04e01010utb.html">UiView事件传递相关函数：pointInside:withEvent:</a></li>
<li><a href="http://wiki.eoe.cn/page/iOS_pptl_artile_28218.html">iOS中管理图形上下文</a></li>
<li><a href="http://stackoverflow.com/questions/13291919/detect-touches-only-on-non-transparent-pixels-of-uiimageview-efficiently">Detect touches only on non-transparent pixels of UIImageView, efficiently</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建基于Github的Octopress博客]]></title>
    <link href="http://wonderffee.github.io/blog/2013/07/09/da-jian-ji-yu-githubde-octopressbo-ke/"/>
    <updated>2013-07-09T23:18:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/07/09/da-jian-ji-yu-githubde-octopressbo-ke</id>
    <content type="html"><![CDATA[<p>我无意像其它人一样写一个大而全的教程，这样的教程在网上已经有很多，你只需要参考下面任何一个教程都可以得到满意的答案。</p>

<ul>
<li><a href="http://octopress.org/docs/">Octopress官方文档</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></li>
<li><a href="http://biaobiaoqi.me/blog/2013/03/21/building-octopress-in-github-mac/">在github上搭建octopress博客</a></li>
<li><a href="http://easypi.github.io/blog/2013/01/05/using-octopress-to-setup-blog-on-github/">利用Octopress在github Pages上搭建个人博客</a></li>
<li><a href="http://ishalou.com/blog/2012/10/15/how-to-use-octopress/">使用Octopress + Github管理blog</a>    <br/>
其中前面三个链接是我主要参考的。</li>
</ul>


<p>这里，我主要想记录我遇到的一些问题，以期望能对那些遇到类似问题的人有些许帮助。当然，如果你在操作之前先看到了这篇文章，那也不妨先看看再更有底气地动手。</p>

<!--more-->


<h3>Github repository设置</h3>

<p>基于Github的博客其实是利用了Github Pages支持html上传的功能来实现的，那么怎么开通Github Pages呢？答案很简单，在你的Github上创建一个名为username.github.io的repository，然后上传html就可以了。上传hmtl就是后面提到的rake deploy命令负责的，先不用管，这里说说repository的命名。</p>

<p>多数教程建议在GitHub上建立名为username.Github.com的repository（其中username要替换成Github真实用户名），但是我根据Octopress教程操作时，发现要求提供的Git地址是git@github.com:username/username.github.io.git，当时我就迷惑了，到底是.com还是.io？之后才发现.com这个后缀是Github早期推荐使用的，现在推荐使用.io格式，为了兼容起见，Github还是让username.github.com能够访问，不过是让它自动指向username.github.io而已。因此为了避免疑惑，对初次使用者还是建议使用username.github.io来命名自己的repository.</p>

<p>如果你还是一位Git初学者，在建repositionary时最好不要勾选生成README.md文件，说来惭愧，由于本人对Git还停留在准入门阶段，一时手贱结果让这个东东在后面给我造成了一些麻烦。如果你是Git初学者就信我这一回，不要勾选。</p>

<h3>Ruby安装失败问题</h3>

<p>准备条件中有一条要有ruby 1.9.3环境，我的MacOS系统(10.8.1)原生自带ruby，就是版本是1.8.7低了一点，需要通过rvm来升级到1.9.3版本。需要注意的是ruby现在已经是2.0版本了，不确定用最新版本的ruby能否安装成功，因此不要贸然尝试将ruby更新到最新版本。</p>

<p>我下载rvm后安装ruby 1.9.3，执行命令：rvm install 1.9.3，遇到下面的问题 <br/>
There was an error while trying to resolve rubygems version for &lsquo;latest&rsquo;.   <br/>
Halting the installation.   <br/>
不明原因，解决方法是重试：rvm reinstall 1.9.3   <br/>
参考：<a href="http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/">http://misheska.com/blog/2013/06/16/using-rvm-to-manage-multiple-versions-of-ruby/</a></p>

<h3>Github SSH key</h3>

<p>Octopress博客的创建过程中需要用到Github SSH key，生成Github SSH key的方法可以参考Github官方的<a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a>教程</p>

<h3>访问博客时显示404的问题</h3>

<p>我按照别人博客教程里提供的方法弄完了，去看我的博客，发现给了一个404的页面。有人说要等十几分钟才会正常，结果我等了一个多小时还是原样。是怎么回事呢，最后才发现我漏输了一个&#8221;rake deploy&#8221;命令，导致我的本地博客根本就没有发布到Github上去，真是大意。</p>

<p>这还得从名为username.github.io的repository的构成说起，每个在Github上发布成功的博客，在username.github.io这个repository里都会有两个分支，分别为master和source。其中master分支存放博客正常显示所需要的静态文件（也就是rake generate生成的），source分支下是整个博客的全部源码。&#8221;rake deploy&#8221;命令的主要作用就是把本地的_deploy目录下面的内容push到远程的master分支，如果忘记执行这条命令，master分支下就没有内容，访问博客自然也就会出现404错误了。</p>

<h3>关于博客配置与MarkDown学习</h3>

<p>Github博客的配置主要在_config.yml这个文件中进行，各个教程也都做了简短介绍，比如去掉一些不用的侧边栏，增加分享与评论功能，但仅限于此。</p>

<p>在Github上写博客，MarkDown是必须的技能。基本上每个提供搭建Github博客教程都会让你去看MarkDown的语法教程或的网上介绍文章，比如<a href="http://daringfireball.net/projects/markdown/">这个</a>，还有<a href="http://wowubuntu.com/markdown/index.html">这个</a>。</p>

<p>但是我想说最好的教程就是各位大牛自己的博客，怎么说呢，基于Github建立的博客源码都是托管在Github上面的，我们完全可以找到每篇博客的源码。如果你想看看别人的博客是怎么配置的，可以去看他的博客源码souce分支下的_config.yml文件，如果想看别人的博客用MarkDown怎么写的，可以看source分支source目录下的_posts路径下的MarkDown文件，这比看各种各样的教程与介绍直观多了，而且很快能找到自己想要的。比如可以参考<a href="http://blog.devtang.com/">唐巧的博客</a>与对应的<a href="https://github.com/tangqiaoboy/tangqiaoboy.github.com">源码托管处</a>，看看他的博客怎么配置的、文章是怎么用MarkDown写出来的，然后自己照葫芦画瓢就行了。</p>

<p>编辑md文件我是用Sublime Text2的，供参考。</p>

<h3>发表博文常用命令：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>#创建一篇博文
</span><span class='line'>rake new_post["post title"] #将在工作目录的source/_post/目录下生成相应的markdown文件。然后可以使用mou工具去修改编辑内容。
</span><span class='line'>
</span><span class='line'>#生成预览
</span><span class='line'>rake preview #可以在浏览器中访问localhost:4000在本机实时观察最新的编辑效果。
</span><span class='line'>
</span><span class='line'>#在线发布
</span><span class='line'>rake deploy  #这一步将最新的内容push到Github上的master分支，完成部署。成功后，即可在线访问。
</span><span class='line'>
</span><span class='line'>#向github提交源文件更新
</span><span class='line'>git add .
</span><span class='line'>git commit -m "提交内容"
</span><span class='line'>git push origin source
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>相对于其它博客，搭建这样的博客还是有点折腾的，费了我不少时间，还好对于我来说不是多大的问题。对于普通用户而言，恐怕就没那么简单了，技术门槛摆在那里是个问题。这种门槛也并非是坏事，至少将一些别有用心的人挡在了Github外面，SourceForge是前车之鉴啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的开始]]></title>
    <link href="http://wonderffee.github.io/blog/2013/07/06/a-new-begin/"/>
    <updated>2013-07-06T22:24:00+08:00</updated>
    <id>http://wonderffee.github.io/blog/2013/07/06/a-new-begin</id>
    <content type="html"><![CDATA[<p><img src="http://wonderffee.github.io/images/snail.jpg"></p>

<p>很久都没有写博客了，上一次写博客还是两三年前的事，那时还在学校，那时还没有现在这么忙。工作至今，越来越觉得有必要重新拣起博客，一些技术积累，一些心得，不记下来，永远只是在脑海中昙花一现。好记性不如烂笔头，这是亘古不变的真理。平常也会用EverNote来记录一些工作技术上的心得，但这种独自享有的感觉却并不好，现在的世界是开源的世界，我曾经索取很多，现在是时候再分享一些东西了。</p>

<!--more-->


<p>原来的博客是在博客大巴上的，在这个略有文艺清新风格的博客上写一些技术博客，感觉是有点不伦不类的，也没有氛围，再继续写下去，自己也不能接受。考虑过CSDN，但自己不太喜欢它的博客风格，我还是更喜欢能自定义一些东西。也想过用WordPress搭建自己的博客，可看到VPS的价格觉得自己是承受不起的，作罢。后来有一次搜资料搜到了唐巧的博客，觉得这种类苹果的简洁风格挺不错，一查个究竟，发现居然是在Github上建的博客，当时就惊诧了，神马，Github上也能写博客？看过那篇《象写程序一样写博客：搭建基于github的博客》什么都明白了，开源再次发挥了强大的力量。这种像Hacker一样的写博客也挺合我胃口，而且还可以把它当独立博客。接着，我在上周利用周末折腾了一下将博客基本搭出来了。那真的就是一时的冲动，坦白地说，那时候Git都不怎么会用，对Git的概念也还处于懵懵懂懂的状态，折腾的过程中因为不熟悉Git没少浪费时间。不过麻烦归麻烦，好处却少不了，至少开始正儿八经地用上Git了，以后也可以号称自己会用Git了，哈哈。</p>

<p>博客折腾完了，得开始给这个博客加点内容了。本人iOS攻城狮一枚，因此可以负责任说，这个博客以后的文章主打iOS开发技术了，当然也不排除写一些MLinux、Windows上的东西。本来自己一开始也不是做iOS开发的，后来机缘巧合才做起了这个。我工作一开始是用Linux C，做这个不到一年后因项目变动不得不从零起步做起了iOS开发，开始了天天与Mac、iPhone，iPad打交道的日子，看上去很让人羡慕，其实也不然。时间倒退几年，苹果的产品对我还是很遥远的东西，听闻Mac很漂亮，iPod很流行，iPhone更是风靡全球，但价格也是高高在上，当时还是学生的我也甭指望能用到苹果的任何东东了，当然，也没机会接触。因为工作的关系，我的系统使用完成了Windows&mdash;>Linux&mdash;>MacOS的大转变，第一次看到MacOS系统时，心里顿生一种惊艳的感觉，这直接导致我在接触iOS不到一年后就自己买了一台Mac Mini做为自己的主力用机，现在的这篇博客就是在这台小巧玲珑的东东上敲出来的。现在除了一些不可替代的软件，基本上都不用Windows了，自己的Windows笔记本也经常性地蒙上一尘灰。用Mac就基本上不用担心Windows上一些流氓软件了，杀毒软件也免了，跟Linux同源又比Linux漂亮，能有的软件也都有了，因此如果不是非Windows不可以及经济允许的话，我建议每个人都可以尝试一下Mac电脑，入门级，首选Mac Mini。貌似扯得有点远了。</p>

<p>其实，还是因为做iOS的缘故，让我认识了Github，很多iOS开源代码就放在Github上，不用还真不行，但用就是对的。iOS完全被苹果掌控，每年都会更新换代，这就意味着每一个iOS开发人员都得跟得上苹果的步伐才不至于落后，除了苹果的英文资料与网上的博客，Github上的代码就是最好的学习范例。就目前看来，Github上提供了世界最完美的编程社交平台，参与其中，必会有一些收获。打算以后，也要在Github上多多贡献自己一些代码了，要不然还真愧对于自己一直以来只求索取的行为了。</p>

<p>无论怎样，不管是用Github写博客还是在Github上贡献代码，对于自己来说都是新的尝试。自己需要做的，就是像一只蜗牛一样，缓缓前行，一步一步留下自己的印记！</p>

<p>本文图片来源：<a href="http://share.9ikblog.com/archives/30-tips-to-improve-your-ios-design-workflow-in-photoshop.html">PHOTOSHOP中改进IOS设计流程的30个诀窍</a></p>
]]></content>
  </entry>
  
</feed>
